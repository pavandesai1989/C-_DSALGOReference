Types of Design Patterns
There are mainly three types of design patterns:

1.Creational:
These design patterns are all about class instantiation or object creation. These patterns can be further categorized into Class-creational patterns and object-creational patterns. While class-creation patterns use inheritance effectively in the instantiation process, object-creation patterns use delegation effectively to get the job done.
Creational design patterns are the Factory Method, Abstract Factory, Builder, Singleton, Object Pool, and Prototype.

2.Structural:
These design patterns are about organizing different classes and objects to form larger structures and provide new functionality.
Structural design patterns are Adapter,Decorator,Proxy,Briadge.

3.Behavioral:
Behavioral patterns are about identifying common communication patterns between objects and realize these patterns.
observer,command,memento,template.

Implementations:
/**************************Singleton****************************************/
#include <iostream>
using namespace std;
class Singleton
{
private:
    static bool instanceFlag;
    static Singleton *single;
    Singleton()
    {
        //private constructor
    }
public:
    static Singleton* getInstance();
    void method();
    ~Singleton()
    {
        instanceFlag = false;
    }
};

bool Singleton::instanceFlag = false;
Singleton* Singleton::single = NULL;
Singleton* Singleton::getInstance()
{
    if(! instanceFlag)
    {
        single = new Singleton();
        instanceFlag = true;
        return single;
    }
    else
    {
        return single;
    }
}

void Singleton::method()
{
    cout << "Method of the singleton class" << endl;
}

int main()
{
    Singleton *sc1,*sc2;
    sc1 = Singleton::getInstance();
    sc1->method();
    sc2 = Singleton::getInstance();
    sc2->method();

    return 0;
}

/****************************************************Factory method***********************************************/
The Factory Method pattern is a design pattern used to define a runtime interface for creating an object. 
Itâ€™s called a factory because it creates various types of objects without necessarily knowing what kind of object it creates or
how to create it.

why factory? what prob with below code?
// A design without factory pattern 
#include <iostream> 
using namespace std; 
  
// Library classes 
class Vehicle { 
public: 
    virtual void printVehicle() = 0; 
}; 

class TwoWheeler : public Vehicle { 
public: 
    void printVehicle()  { 
        cout << "I am two wheeler" << endl; 
    } 
}; 

class FourWheeler : public Vehicle { 
    public: 
    void printVehicle()  { 
        cout << "I am four wheeler" << endl; 
    } 
}; 
  
// Client (or user) class 
class Client { 
public: 
    Client(int type)  { 
  
        // Client explicitly creates classes according to type 
        if (type == 1) 
            pVehicle = new TwoWheeler(); 
        else if (type == 2) 
            pVehicle = new FourWheeler(); 
        else
            pVehicle = NULL; 
    } 
  
    ~Client()   { 
        if (pVehicle) 
        { 
            delete[] pVehicle; 
            pVehicle = NULL; 
        } 
    } 
  
    Vehicle* getVehicle() { 
        return pVehicle; 
    } 
private: 
    Vehicle *pVehicle; 
}; 
  
// Driver program 
int main() { 
    Client *pClient = new Client(1); 
    Vehicle * pVehicle = pClient->getVehicle(); 
    pVehicle->printVehicle(); 
    return 0; 
} 
What is the problems with above design?
As you must have observed in the above example, Client creates objects of either TwoWheeler or FourWheeler based on some input 
during constructing its object.Say, library introduces a new class ThreeWheeler to incorporate three wheeler vehicles also. 
What would happen? Client will end up chaining a new else if in the conditional ladder to create objects of ThreeWheeler.
Which in turn will need Client to be recompiled. So, each time a new change is made at the library side, Client would need to
make some corresponding changes at its end and recompile the code. Sounds bad? This is a very bad practice of design.


below is the solution!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
// C++ program to demonstrate factory method design pattern 
#include <iostream> 
using namespace std; 
  
enum VehicleType { 
    VT_TwoWheeler,    VT_ThreeWheeler,    VT_FourWheeler 
}; 
  
// Library classes 
class Vehicle { 
public: 
    virtual void printVehicle() = 0; 
    static Vehicle* Create(VehicleType type); 
}; 
class TwoWheeler : public Vehicle { 
public: 
    void printVehicle() { 
        cout << "I am two wheeler" << endl; 
    } 
}; 
class ThreeWheeler : public Vehicle { 
public: 
    void printVehicle() { 
        cout << "I am three wheeler" << endl; 
    } 
}; 
class FourWheeler : public Vehicle { 
    public: 
    void printVehicle() { 
        cout << "I am four wheeler" << endl; 
    } 
}; 
  
// Factory method to create objects of different types. 
// Change is required only in this function to create a new object type 
Vehicle* Vehicle::Create(VehicleType type) { 
    if (type == VT_TwoWheeler) 
        return new TwoWheeler(); 
    else if (type == VT_ThreeWheeler) 
        return new ThreeWheeler(); 
    else if (type == VT_FourWheeler) 
        return new FourWheeler(); 
    else return NULL; 
} 
  
// Client class 
class Client { 
public: 
  
    // Client doesn't explicitly create objects 
    // but passes type to factory method "Create()" 
    Client() 
    { 
        VehicleType type = VT_ThreeWheeler; 
        pVehicle = Vehicle::Create(type); 
    } 
    ~Client() { 
        if (pVehicle) { 
            delete[] pVehicle; 
            pVehicle = NULL; 
        } 
    } 
    Vehicle* getVehicle()  { 
        return pVehicle; 
    } 
  
private: 
    Vehicle *pVehicle; 
}; 
  
// Driver program 
int main() { 
    Client *pClient = new Client(); 
    Vehicle * pVehicle = pClient->getVehicle(); 
    pVehicle->printVehicle(); 
    return 0; 
} 
Output:

I am three wheeler
































