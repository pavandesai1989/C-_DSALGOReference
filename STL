STL: (Standard Template Library) STL has four components
Algorithms
Containers
Functions
Iterators
/***********************************************Algorithms-  ********************************************
sorting : 
std::sort uses The algorithm used by sort() is IntroSort. Introsort being a hybrid sorting algorithm uses 
three sorting algorithm to minimise the running time, Quicksort, Heapsort and Insertion Sort. Simply putting, 
it is the best sorting algorithm around. It is a hybrid sorting algorithm, which means that it uses more than one sorting 
algorithms as a routine.

    vector<int> vec = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0}; 
    sort(vec.begin(),vec.end());  //default sort in asending order!!!! default less operator  sort(vec.begin(),vec.end(),less<int>());

if i want to sort in desending order  sort(vec.begin(),vec.end(),greater<int>()); 

searching :  binary search    array/vector must be sorted
binary_search(startaddress, endaddress, valuetofind)

/**************important STL algorihtms***********************************************************************************************/
sort(first_iterator, last_iterator) – To sort the given vector.
reverse(first_iterator, last_iterator) – To reverse a vector.
*max_element (first_iterator, last_iterator) – To find the maximum element of a vector
*min_element (first_iterator, last_iterator) – To find the minimum element of a vector.
accumulate(first_iterator, last_iterator, initial value of sum) – Does the summation of vector elements

count(first_iterator, last_iterator,x) – To count the occurrences of x in vector
find(first_iterator, last_iterator, x) – Points to last address of vector ((name_of_vector).end()) if element is not present in vector.
lower_bound(first_iterator, last_iterator, x) – returns an iterator pointing to the first element in the range [first,last) which is equal to
‘x’ else gives iterator to next grater ele in a sorted sequence . Its like first equal to or grater than

    vector<int> vec = {1,2,4,5,6};
   auto it =  std::lower_bound(vec.begin(),vec.end(),3);
   cout<<*it<<endl;    //outputs 4 as we dont have 3 .If u search 3 its gives iterator to 3
   
       vector<int> vec = {1,2,4,5,6};
   auto it =  std::lower_bound(vec.begin(),vec.end(),10);
   if(it == vec.end())
      cout<<"not found"<<endl;

upper_bound(first_iterator, last_iterator, x) ---  first grater than
    vector<int> vec = {1,2,4,5,6};
   auto it =  std::upper_bound(vec.begin(),vec.end(),2);
   cout<<*it<<endl;    //4
   
 /**********************************************Some Manipulating Algorithms********************************************************/  
 arr.erase(position to be deleted) – This erases selected element in vector and shifts and resizes the vector elements accordingly.
 distance(first_iterator,desired_position) – It returns the distance of desired position from the first iterator.This function is very useful while finding the index.
 
 /**************************useful array algorithms*************************************************************************************/
 all_of() ---- This function operates on whole range of array elements and can save time to run a loop to check each elements one by one. It checks for a given property on every element and returns true when 
 each element in range satisfies specified property, else returns false.
   vector<int> vec = {1,2,4,5,6};
   cout<<all_of(vec.begin(),vec.end(),[](int ele){return (ele%2==0);});  //output 0 
   
 any_of() ---   This function checks for a given range if there’s even one element satisfying a given property mentioned in function. 
 Returns true if at least one element satisfies the property else returns false. 
 
 none_of() ---  This function returns true if none of elements satisfies the given condition else returns false
 copy_n()

copy_n()--- copies one array elements to new array. This type of copy creates a deep copy of array. This function takes 3
arguments, source array name, size of array and the target array name.  
    int ar[6] =  {1, 2, 3, 4, 5, 6}; 
  
    // Declaring second array 
    int ar1[6]; 
  
    // Using copy_n() to copy contents 
    copy_n(ar, 6, ar1);
    
/****************************************Containers*****************************************************************************/
Containers --- Containers or container classes store objects and data. There are in total seven standard “first-class” container 
classes and three container adaptor classes and only seven header files that provide access to these containers or container adaptors.

***********************Sequence Containers: implement data structures which can be accessed in a sequential manner*****************
vector
list
deque
arrays
forward_list( Introduced in C++11)

*****************Container Adaptors : provide a different interface for sequential containers*****************************
queue
priority_queue
stack
***************Associative Containers : implement sorted data structures that can be quickly searched (O(log n) complexity)********
set
multiset
map
multimap

Unordered Associative Containers : implement unordered data structures that can be quickly searched
unordered_set (Introduced in C++11)
unordered_multiset (Introduced in C++11)
unordered_map (Introduced in C++11)
unordered_multimap (Introduced in C++11)

.*********************************************Functions***************************************************/
The STL includes classes that overload the function call operator. Instances of such classes are called function objects or functors. Functors allow the working of the associated function to be customized with the help of parameters to be passed.

Functors


**********************Iterators**********************************************
As the name suggests, iterators are used for working upon a sequence of values. They are the major feature that allow generality in STL.

Iterators
*****************************************Utility Library********************************
Defined under <utility header>
pair
********************************************************************************************************************** 
/******************STL unordered map*****************************************/
Unordered_map provides a functionality of map i.e. it store the elements in key value pair and with unique key only.
Unordered_map internally uses the hashing to achieve this. It internally uses a hash table to implement this hashing feature.

/************example code of unorderd map********************/
#include <iostream>
#include <unordered_map>
#include <string>
int main()
{
// Create an empty unordered_map
std::unordered_map<std::string, int> wordMap;
// Insert Few elements in map
wordMap.insert( { "First", 1 });
wordMap.insert(	{ "Second", 2 });
wordMap.insert(	{ "Third", 3 });
// Overwrite value of an element
wordMap["Third"] = 8;
// Iterate Over the unordered_map and display elements
for (std::pair<std::string, int> element : wordMap)
std::cout << element.first << " :: " << element.second << std::endl;
return 0;
}
/**************************************************************************/
/************insert value in map and display********************/
#include<iostream>
#include<vector>
#include<algorithm>
#include<unordered_map>
using namespace std;
int main()
{
    unordered_map<string,int> mymap;    
    mymap.insert({{"pavan",10},{"rahul",20},{"mahesh",58}});
    
    for(pair<string,int> element:mymap)
      cout<<element.first<<"  "<<element.second<<endl;
    
    return 0;
}

/********check by inserting already existing key**********************/
      //overloaded insert
      auto result = mymap.insert(make_pair("pavan",125));
      if(result.second == false)
         cout<<"insertion failed "<<endl;
	 
	 ABOVE AUTO IS 
	 pair<unordered_map<string,int>::iterator,bool> result = mymap.insert(make_pair("pavan",125));
/***************************************************************************/
/*************How to find an element in unordered_map*******************************/
    unordered_map<string,int>::iterator it = mymap.find("pavan");
    if(it!=mymap.end())
      cout<<"key found at location "<<endl;
/*********************************different versions of insert***********************************************************/
u can add multiple values in hash table using initializer list.


/************ Erasing an element from an unordered_map by key********************************************/
size_type erase ( const key_type& k );----------->It returns the number of elements deleted. But as unordered_map can conain only unique elements, 
so it will return either 0 or 1.

    if(mymap.erase("pavan"))
       cout<<"erase success "<<endl;
       
/*************8Erasing an element from an unordered_map through an iterator************************************/
find the element by key and then erase that
   unordered_map<string,int>::iterator it = mymap.find("pavan");
    if(it!=mymap.end())
      mymap.erase(it);
    cout<<"map after erase "<<endl;
    
    for(auto element:mymap)
       cout<<element.first<<"   "<<element.second<<endl;
       
/********************************VVVVIMP Using user define objects as Keys : *************************************************************************/
For std::map to use user defined object as keys, we need to override either < operator or pass external comparator i.e. 
a functor or function pointer that can be used by map for comparing keys.

Where as, For std::unordered_map we need to provide definition of function std::hash<K> for our key type K. 
Also we need to override == operator.


VVVVVVVVVVIMP to implement unordered_map on user defined keys
1. define operator ===
2.create hash function
/***************************exapmle code techie delight*************************************************/
#include <iostream>
#include <unordered_map>

template<typename T1, typename T2>
struct Node
{
	T1 x;
	T2 y;

	// constructor
	Node(T1 x, T2 y)
	{
		this->x = x;
		this->y = y;
	}

	// operator== is required to compare keys in case of hash collision
	bool operator==(const Node &p) const
	{
		return x == p.x && y == p.y;
	}
};

// specialized hash function for unordered_map keys
struct hash_fn
{
	template <class T1, class T2>
	std::size_t operator() (const Node<T1, T2> &node) const
	{
		std::size_t h1 = std::hash<T1>()(node.x);
		std::size_t h2 = std::hash<T2>()(node.y);

		return h1 ^ h2;
	}
};

int main()
{
	std::unordered_map<Node<std::string,std::string>, int, hash_fn> u_map =
	{
		{{"C", "C99"}, 1999},
		{{"C", "C11"}, 2011},
		{{"C++", "C++14"}, 2014},
		{{"C++", "C++17"}, 2017},
		{{"Java", "Java SE 8"}, 2014},
		{{"Java", "Java SE 9"}, 2017}
	};

	for (const auto &entry: u_map)
	{
		std::cout << "{" << entry.first.x << "," << entry.first.y << "}: "
				 << entry.second << '\n';
	}

	return 0;
}


*************************Unordered set****************************************************
std::unordered_set is an STL container and its introduced in C++11. It provides a functionality of a Set i.e. 
it can contains the unique elements only. unordered_set stores the elements internally using a Hash Table.

Elements of Type with which an unoredered_set is declared can only be added in it. Also, all elements of Type T should be,
Copyable or Movable
Comparable
Above requirements are because of the reason that element added in unordered_set will act as both key and
value for internal Hash Table. As it’s a key therefore it should be comparable and copy-able.

Also, all elements in the unordered_set are immutable i.e. they can not be modified once inserted.
They can only be deleted after the insertion

#include <iostream>
#include <unordered_set>
#include <algorithm>
int main() {
// Creating an Unoredered_set of type string
std::unordered_set<std::string> setOfStrs;
// Insert strings to the set
setOfStrs.insert("First");
setOfStrs.insert("second");
setOfStrs.insert("third");
// Try to Insert a duplicate string in set
setOfStrs.insert("second");
// Iterate Over the Unordered Set and display it
for (std::string s : setOfStrs)
std::cout << s << std::endl;
}

/*********************initialise unordered set****************************************/
1. using arrays
// Array of int
int arr[] = {2,4,6,1,3,6,8,3,2};
 
// Create an unoredered set and initialize it with the array
// Set will contain only unique elements
std::unordered_set<int> setOfNum(arr, arr + sizeof(arr)/sizeof(int));

2.using initializer list
// Create an unoredered set and initialize it initializer_list
std::unordered_set<int> setOfNum2({1,2,3,1,3,4,2});

3.using vector.
std::vector<int> vec({14,5,6,7});
 
// Create an unoredered set and initialize it with vector
std::unordered_set<int> setOfNum3(vec.begin(), vec.end());


/*********************insert in unordered_set**********************************************************/
pair<iterator,bool> insert ( const value_type& val );
void insert ( InputIterator first, InputIterator last );
void insert ( initializer_list<value_type> il );


/**********************unordered set on user defined keys THIS******************************************/
std::unordered_set uses the hasher and comparison function. For primitive data types like int, string etc. 
default hasher anc comparision functions will work i.e.
std::hash<T>()
std::equal_to<T>
But for User defined Objects, these default implementations will not work. We need to provide some extra to make this default 
functions work.

/*  STL Set*/

1.std::set is an associative container and header that need to be include for it is,
#include<set>

2.Benefits and Features of std::set
a)It’s doesn’t allow duplicate elements i.e. it only contains unique elements.
b)Std::set can contain element of any specified type in template argument i.e.
c)std::set internally store elements in balanced binary tree.
d)By default std::set uses the operator < for comparing two elements and but if user passes the external sorting 
  criteria i.e. comparator then it uses that instead of default operator <.
e) std::set will keep the inserted elements in sorted order based on the assigned sorting criteria i.e. 
   either by default criteria operator < or by passed comparator (if passed)

/*********************set create and display******************************/
#include<iostream>
#include<set>
#include<string>
int main()
{
std::set<std::string> setOfNumbers;
// Lets insert four elements
setOfNumbers.insert("first");
setOfNumbers.insert("second");
setOfNumbers.insert("third");
setOfNumbers.insert("first");
// Only 3 elements will be inserted
std::cout<<"Set Size = "<<setOfNumbers.size()<<std::endl;
// Iterate through all the elements in a set and display the value.
for (std::set<std::string>::iterator it=setOfNumbers.begin(); it!=setOfNumbers.end(); ++it)
std::cout << ' ' << *it;
std::cout<<"\n";
return 0;
}

Output:
Set Size = 3
first second third

/******************How to search an element in std::set*********************************/
iterator find (const value_type& val) const;
It Searches the container for an element equivalent to val and returns an iterator to it 
if found, otherwise it returns an iterator to set::end.

#include<iostream>
#include<set>
#include<string>
int main()
{
std::set<std::string> setOfNumbers;
// Lets insert four elements
setOfNumbers.insert("first");
setOfNumbers.insert("second");
setOfNumbers.insert("third");
setOfNumbers.insert("first");
// Search for element in set using find member function
std::set<std::string>::iterator it = setOfNumbers.find("second");
if(it != setOfNumbers.end())
std::cout<<"'first'  found"<<std::endl;
else
std::cout<<"'first' not found"<<std::endl;
// Search for element in set using find member function
it = setOfNumbers.find("fourth");
if(it != setOfNumbers.end())
std::cout<<"'fourth'  found"<<std::endl;
else
std::cout<<"'fourth' not found"<<std::endl;
return 0;
}

Output:
‘first’ found
‘fourth’ not found

/***********************How to remove an element in std::set :***********************/
iterator  erase (const_iterator position);
size_type erase (const value_type& val);
iterator  erase (const_iterator first, const_iterator last);

/**********************C++ set for user define data type********************************/
#include<bits/stdc++.h> 
using namespace std; 
  
// Structure definition 
struct Test { 
    int id; 
      
    // This function is used by set to order 
    // elements of Test. 
    bool operator<(const Test& t) const
    { 
        return (this->id < t.id); 
    } 
}; 
  
// Driver method 
int main() 
{ 
    // put values in each  
    // structure define below. 
    Test t1 = { 110 }, t2 = { 102 },  
         t3 = { 101 }, t4 = { 115 }; 
  
    // define a set having  
    // structure as its elements. 
    set<struct Test> s;  
      
    // insert structure in set 
    s.insert(t1);  
    s.insert(t2); 
    s.insert(t3); 
    s.insert(t4); 
      
    // define an iterator to iterate the whole set. 
    set<struct Test>::iterator it;  
      
    for (it = s.begin(); it != s.end(); it++) 
    { 
        // print in ascending order as required. 
        cout << (*it).id << endl;  
    } 
      
    return 0; 
}


Accessing nth element using std::advance
// Iterator to the beginning of set
std::set<std::string>::iterator iter = setOfStr.begin();
// It will move forward the passed iterator by passed value
std::advance(iter, 3);
std::cout<<"3rd Element in set = "<<*iter<<std::endl;

Accessing nth element using std::next
It is introduced in c++11, unlike std::advance it doesn’t increment the given iterator, instead it returns a new iterator 
that will be n position advanced to given iterator.
Let’s see how to access the 3rd element using std::next,

// std::next internally iterate through n elements to reach
// nth element and returns the iterator of 3rd element in the set
std::set<std::string>::iterator it = std::next(setOfStr.begin(), 3);
std::cout<<"3rd Element in set = "<<*it<<std::endl;

/********************Inserting a Single element in Set and checking the result**********************************/
  Test t4(4);
  Test t1(1);
  Test t3(3);
  Test t2(2);

  set<Test> myset;
  myset.insert(t1);
  myset.insert(t2);
  myset.insert(t3);
  myset.insert(t4);

  pair<set<Test>::iterator,bool> result;
  result = myset.insert(2);

  if(result.second == false)
    cout<<"insertion failed "<<endl;
  else
    cout<<"Failed"<<endl;  
    
    //output insertion failed as we have already 2 in our set.!!!!!!!!!!!!!!!!!!!!!!!
    
  /********************************* Inserting an Iterator Range into a Set*******************************/
  std::vector<std::string> vecOfStrs = {"Hi", "Hello", "is", "the", "at", "Hi", "is"};
 
	std::set<std::string> setOfStrs;
 
	// Insert a Range in set
	// Range here is start and end iterators of a vector
	setOfStrs.insert(vecOfStrs.begin(), vecOfStrs.end());
  
  /**************Inserting a Initializer List in Set************************************/
  	std::set<std::string> setOfStrs;
 
	// Insert a Initializer list in the set
	setOfStrs.insert({"Hi", "Hello", "is", "the", "at", "Hi", "is"});
  
  
  
  /*************************set vs map**************************************/
a) Set :
Set is an associative container which we need to store unique elements.
It always keeps the elements in sorted order.
Internally it maintains a balanced binary search tree of elements. Therefore when we search an element inside the set 
then it takes only log(n) complexity to search it.

b) map:
Map:
Map is a associative container that is used to store key-value pair of elements with unique keys.
It always keeps the inserted pairs in sorted order based on the key.
Internally it maintains a balanced binary search tree to store keys. Therefore when searching key inside the map takes only
log(n) complexity.
We cannot modify the key of any inserted pair in map.
We can modify the value associated with a key in any inserted pair in map.

When to choose SET and when MAP?
So, if you want to maintain a data structure of unique keys only without any associated value that plan to modify in future then use set. If you want to modify any element in set then erase it and then insert the new one.
Whereas, use map if you want to maintain a data structure of unique keys and some associated value with each key that you want to change in future.









