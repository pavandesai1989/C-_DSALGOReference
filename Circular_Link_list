/*Operations on circular link list */
#include <iostream> 
using namespace std;

class node
{
public:
  int data;
  node* next;

public:
  node(int d):data(d),next(nullptr)  {
  }
};

void InsertAtHead(node*& head,int data)
{
  node* newnode = new node(data);
  if(!head)
  {
     head = newnode;
     newnode->next = head;    
  }
  else
  {
    node* temp = head;
    while(temp->next!=head)
      temp = temp->next;

    newnode->next = head;
    head = newnode;
    temp->next = head;
  }
}

void InsertAtTail(node*& head,int data)
{
  node* newnode = new node(data);
  if(!head)
  {
    head = newnode;
    newnode->next = head;
  }
  else
  {
    node* temp = head;
    while(temp->next!=head)
      temp = temp->next;

    temp->next = newnode;
    newnode->next = head;
  }
}

void DeleteAtHead(node*& head)
{
  if(!head)
  {
    cout<<"Empty list!!!!!"<<endl;
    return;
  }
  else
  {
    node* temp = head;
    node* old_head = head;

    while(temp->next!=head)
      temp = temp->next;

    temp->next = head->next;
    head = head->next;
    delete old_head;
  }
}


void DeleteAtTail(node*&head)
{
  if(!head)
  {
    cout<<"empty list!!!!!!"<<endl;
    return;
  }
  else
  {
    node* temp = head;
    node*prev = head;
    while(temp->next!=head)
    {
      prev = temp;
      temp = temp->next;
    }

    prev->next = head;
    delete temp;
  }
}

void print(node* head)
{
  node* temp = head;
  while(temp->next!=head)
  {
    cout<<temp->data<<"  ";
    temp = temp->next;
  }
  cout<<temp->data<<endl;
}
  
int main() 
{ 
  node * head = nullptr;

  InsertAtTail(head,1);
  InsertAtTail(head,2);
  InsertAtTail(head,3);
  InsertAtTail(head,4);

  print(head);
  DeleteAtTail(head);
  print(head);
  return 0; 
}
